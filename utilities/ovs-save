#! /bin/sh

# Copyright (c) 2011, 2013, 2016 Nicira, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

case $0 in
    */*) dir0=`echo "$0" | sed 's,/[^/]*$,,'` ;;
    *) dir0=./ ;;
esac
. "$dir0/ovs-lib" || exit 1

usage() {
    UTIL=$(basename $0)
    cat <<EOF
${UTIL}: Provides helper functions to save Open vSwitch's configuration.
usage: $0 COMMAND

Commands:
 save-interfaces        Outputs a shell script on stdout that will restore
                        the current kernel configuration of the specified
                        network interfaces, as well as the system iptables
                        configuration.
 save-flows             Outputs a shell script on stdout that will restore
                        OpenFlow flows of each Open vSwitch bridge.
This script is meant as a helper for the Open vSwitch init script commands.
EOF
}

save_interfaces () {
    if (ip link show) > /dev/null 2>&1; then :; else
        echo "$0: ip not found in $PATH" >&2
        exit 1
    fi

    if test "$#" = 0; then
        exit 0
    fi

    devs="$@"
    for dev in $devs; do
        state=`ip link show dev $dev` || continue

        echo "# $dev"
        # Link state (Ethernet addresses, up/down, ...)
        linkcmd=
        case $state in
            *"state UP"* | *[,\<]"UP"[,\>]* )
                linkcmd="$linkcmd up"
                ;;
            *"state DOWN"*)
                linkcmd="$linkcmd down"
                ;;
        esac
        if expr "$state" : '.*\bdynamic\b' > /dev/null; then
            linkcmd="$linkcmd dynamic"
        fi
        if qlen=`expr "$state" : '.*qlen \([0-9]\+\)'`; then
            linkcmd="$linkcmd txqueuelen $qlen"
        fi
        if hwaddr=`expr "$state" : '.*link/ether \([^ ]*\)'`; then
            linkcmd="$linkcmd address $hwaddr"
        fi
        if brd=`expr "$state" : '.*brd \([^ ]*\)'`; then
            linkcmd="$linkcmd broadcast $brd"
        fi
        if mtu=`expr "$state" : '.*mtu \([0-9]\+\)'`; then
            linkcmd="$linkcmd mtu $mtu"
        fi
        if test -n "$linkcmd"; then
            echo ip link set dev $dev down # Required to change hwaddr.
            echo ip link set dev $dev $linkcmd
        fi

        move_ip_address $dev $dev

        move_ip_routes $dev $dev

        echo
    done

    if (iptables-save) > /dev/null 2>&1; then
        echo "# global"
        echo "iptables-restore <<'EOF'"
        iptables-save
        echo "EOF"
    else
        echo "# iptables-save not found in $PATH, not saving iptables state"
    fi
}

get_highest_ofp_version() {
    ovs-vsctl get bridge "$1" protocols | \
        awk -F '"' '{ print (NF>1)? $(NF-1) : "OpenFlow13" }'
}

save_flows () {
    if (ovs-ofctl --version) > /dev/null 2>&1; then :; else
        echo "$0: ovs-ofctl not found in $PATH" >&2
        exit 1
    fi

    # OVS 2.7 and earlier do not enable OpenFlow 1.4 (by default) and lack
    # other features needed to save and restore flows.  Don't try.
    case `ovs-appctl version | sed 1q` in
        "ovs-vswitchd (Open vSwitch) 1."*.*)
            return
            ;;
        "ovs-vswitchd (Open vSwitch) 2."[0-7].*)
            return
            ;;
    esac

    workdir=$(mktemp -d "${TMPDIR:-/tmp}/ovs-save.XXXXXXXXXX")
    for bridge in "$@"; do
        # Get the highest enabled OpenFlow version
        ofp_version=$(get_highest_ofp_version "$bridge")

        printf "%s" "ovs-ofctl add-tlv-map ${bridge} '"
        ovs-ofctl dump-tlv-map ${bridge} | \
        awk '/^  *0x/ {if (cnt != 0) printf ","; \
             cnt++;printf "{class="$1",type="$2",len="$3"}->"$4}'
        echo "'"

        # If possible use OpenFlow 1.4 atomic bundle txn for flows and groups
        [ ${ofp_version#OpenFlow} -ge 14 ] && bundle=" --bundle" || bundle=""

        echo "ovs-ofctl -O $ofp_version add-groups ${bridge} \
              \"$workdir/$bridge.groups.dump\" ${bundle}"

        echo "ovs-ofctl -O $ofp_version replace-flows ${bridge} \
              \"$workdir/$bridge.flows.dump\" ${bundle}"

        ovs-ofctl -O $ofp_version dump-groups "$bridge" | \
            sed -e '/^OFPST_GROUP_DESC/d' \
                -e '/^NXST_GROUP_DESC/d' > \
                "$workdir/$bridge.groups.dump"

        ovs-ofctl -O $ofp_version dump-flows --no-names --no-stats "$bridge" | \
            sed -e '/NXST_FLOW/d' \
                -e '/OFPST_FLOW/d' \
                -e 's/\(idle\|hard\)_age=[^,]*,//g' > \
                "$workdir/$bridge.flows.dump"
    done
    echo "rm -rf \"$workdir\""
}

while [ $# -ne 0 ]
do
    case $1 in
        "save-flows")
            shift
            save_flows "$@"
            exit 0
            ;;
        "save-interfaces")
            shift
            save_interfaces "$@"
            exit 0
            ;;
        -h | --help)
            usage
            exit 0
            ;;
        *)
            echo >&2 "$0: unknown command \"$1\" (use --help for help)"
            exit 1
            ;;
    esac
done

exit 0
